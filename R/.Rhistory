install.packages(c("DT", "igraph", "shiny", "visNetwork"))
install.packages("jsonlite")
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
install.packages(c("DT", "shiny", "shinyWidgets", "visNetwork"))
install.packages(c("DT", "shiny", "shinyWidgets", "visNetwork"))
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
ui <- fluidPage(
titlePanel(title= "ConceptNet",
windowTitle="Concept Net"),
p("Visualise hypothesis networks for gene signatures"),
br(),
tabsetPanel(
tabPanel("Original",
sidebarLayout(
sidebarPanel(width = 3,
selectInput("signature_id", "Select Signature", choices = c("HYPOXIA_microarray_OG",
"IMATINIB_microarray_OG",
"MDS_microarray_OG",
"ENDOMETRIAL_microarray_OG")),
switchInput(inputId = "rem_study_edge", value = FALSE, label = "Remove same study edges"),
sliderInput("edge_perc_cutoff", "Select percentile edge weight cutoff", value = 0.996,
min = 0.9000, max = 0.9999, step = 0.001),
br(),
sliderInput("node_size", "Scale node size", value = 2,
min = 1, max = 10, step = 1),
br(),
switchInput(inputId = "only_diso", value = FALSE, label = "only disorders"),
br(),
selectInput("selnodes", "Search concepts", choices = NULL, multiple = TRUE),
br(),
p("--------------------------------------------------------------"),
p("NODE INFORMATION"),
htmlOutput("node_selected"),
br(),
DT::dataTableOutput("node_info")
),
mainPanel(visNetworkOutput("network", height = "700px"), width = 9)
)
),
tabPanel("Backbone",
sidebarLayout(
sidebarPanel(width = 3,
selectInput("signature_id_2", "Select Signature", choices = c("HYPOXIA_microarray_BB",
"IMATINIB_microarray_BB",
"MDS_microarray_BB",
"ENDOMETRIAL_microarray_BB")),
switchInput(inputId = "rem_study_edge_2", value = FALSE, label = "Remove same study edges"),
sliderInput("edge_pvalue_cutoff", "Select p-value cutoff", value = 0.001,
min = 0.000, max = 0.010, step = 0.001),
br(),
sliderInput("node_size_2", "Scale node size", value = 2,
min = 1, max = 10, step = 1),
br(),
switchInput(inputId = "only_diso_2", value = FALSE, label = "only disorders"),
br(),
selectInput("selnodes_2", "Search concepts", choices = NULL, multiple = TRUE),
br(),
p("--------------------------------------------------------------"),
p("NODE INFORMATION"),
htmlOutput("node_selected_2"),
br(),
DT::dataTableOutput("node_info_2")
),
mainPanel(visNetworkOutput("network_2", height = "700px"), width = 9)
)
)
)
)
shiny::runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
runApp('/media/ayush/Acer/Users/ayush/Downloads/conceptnetviz')
shiny::runApp('Downloads/thesis/conceptnetviz')
runApp('Downloads/thesis/conceptnetviz')
shiny::runApp('Downloads/thesis/conceptnetviz')
runApp('Downloads/thesis/conceptnetviz')
read_network_json <- function(json_file_path, rem_same_study = F){
network_json <- jsonlite::read_json(json_file_path, simplifyVector = T)
nodes_df <- data.frame(id = network_json$nodes$name,
title = network_json$nodes$name,
shape = "dot",
size = (network_json$nodes$weight) * 100)
nodes_df$group <- sapply(network_json$nodes$categories, function(x){
y <- unique(x[x %in% c("DISO", "PRGE", "CHED", "ANAT")])
y <- y[order(y)]
if(length(y) ==1)
return(y[1])
else
return(paste(y, collapse = "/"))
})
edges_df <- network_json$edges
colnames(edges_df) <- c("from", "to", "width", "gse_ids", "pvalue")
if(rem_same_study)
edges_df[edges_df$gse_ids != "", "width"] <- 1
edge_node_list <- list(edges = edges_df, nodes = nodes_df)
return(edge_node_list)
}
shiny::runApp('Downloads/thesis/conceptnetviz')
shiny::runApp('Downloads/thesis/conceptnetviz')
print (count_A, count_C, count_G, count_T)
count_T <- count_T + 1
else {
count_T <- count_T + 1
}
count_T <- count_T + 1
count_A <- count_A + 1
print (count_A)
if (nuc == 'A'){
countA <- countA + 1
}
print (countT)
for (nuc in seq){
if (nuc == 'A'){
countA <- countA + 1
}
else if (nuc == 'C'){
countC <- countC + 1
}
else if (nuc == 'G'){
countG <- countG + 1
}
else
countT <- countT + 1
}
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
countA <- 0
countC <- 0
countG <- 0
countT <- 0
print (countT)
for (nuc in seq){
if (nuc == 'A'){
countA <- countA + 1
}
else if (nuc == 'C'){
countC <- countC + 1
}
else if (nuc == 'G'){
countG <- countG + 1
}
else
countT <- countT + 1
}
print (countA, countC, countG, countT)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print (count_A, count_C, count_G, count_T)
strsplit(seq, "")
strsplit(seq)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in strsplit(seq, "")){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print (count_A, count_C, count_G, count_T)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in strsplit(seq, "")){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print (count_A, count_C, count_G, count_T)
strsplit(seq, "")[1]
strsplit(seq, "")[[1]]
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print (count_A, count_C, count_G, count_T)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print (count_A)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
print ("%d %d %d %d", count_A, count_C, count_G, count_T)
seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
sprintf ("%d %d %d %d", count_A, count_C, count_G, count_T)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- read.delim("rosalind_dna.txt")
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
sprintf ("%d %d %d %d", count_A, count_C, count_G, count_T)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- read.delim("rosalind_dna.txt")
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
sprintf ("%d %d %d %d", count_A, count_C, count_G, count_T)
seq <- read.delim("rosalind_dna.txt")
print (seq)
library(readLines)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- readLines("rosalind_dna.txt")
library(readLines)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- readLines("rosalind_dna.txt")
print (seq)
seq <- "rosalind_dna.txt"
print (seq)
install.packages("readr")
library(readr)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- read_file("rosalind_dna.txt")
print (seq)
library(readr)
#seq <- "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
seq <- read_file("rosalind_dna.txt")
print (seq)
seq <- paste(readLines("rosalind_dna.txt"), collapse=" ")
print (seq)
readline("rosalind_dna.txt")
read_lines("rosalind_dna.txt")
pwd
getwd
getwd()
setwd('/home/ayush/Downloads/rosalind_bioinformatics/R')
getwd()
read_lines("rosalind_dna.txt")
seq <- read_lines("rosalind_dna.txt")
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
sprintf ("%d %d %d %d", count_A, count_C, count_G, count_T)
seq <- read_lines("rosalind_dna.txt")
split_seq = strsplit(seq, "")[[1]]
count_A <- 0
count_C <- 0
count_G <- 0
count_T <- 0
for (nuc in split_seq){
if (nuc == 'A'){
count_A <- count_A + 1
}
else if (nuc == 'C'){
count_C <- count_C + 1
}
else if (nuc == 'G'){
count_G <- count_G + 1
}
else
count_T <- count_T + 1
}
sprintf ("%d %d %d %d", count_A, count_C, count_G, count_T)
